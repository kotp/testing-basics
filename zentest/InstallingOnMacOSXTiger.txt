Here are the paths I've taken to make autotest works correctly with the lib and test required paths outside of rails applications:

1 - First install Growl

from here: http://growl.info/ 

Install it as any other Mac application.

2 - Install growlnotify

from inside the Growl dmg there is an extra folder where growlnotify can be installed from.

Just run the install.sh script from a terminal.

3 - Install the gems:

ZenTest, which includes autotest

and

redgreen

with: 

sudo gem install ZenTest
sudo gem install redgreen



4 - Prepare your application folders

a - The englobing folder

make for example a Dogproject folder

b - the lib folder

Make a lib folder inside the Dogproject folder.
Put in it your dog.rb file which will contains the Dog class

c - the test folder

Make a test folder inside the Dogproject folder and put in it your 
dog_test.rb file which will contains the tests.

Notice that the files could be generated by ZenTest, what is important here is to have the lib and test structures. And to respect the names for files and classes.

5 - Add some plugins to autotest

create inside the DogProject folder a .autotest file where you can put some plugins:

In a terminal type:

pico .autotest
require 'autotest/growl'
require 'autotest/redgreen'
ctrlO
ctrlX


You may also put it in your home folder, but then you will have the same plugins for all projects.

6 - Launch autotest

Now, just launch autotest in a terminal from your Dogproject folder.

autotest


It will wait without doing nothing, until you change something and save your dog.rb file; at that moment, it will open a growl notification window to tell you what happens (not very interesting this one), more interesting is what happens in the terminal window where it will launch the test suite and report either success with red line, or failure with red line and the lines where it fails.

7 - How to launch ZenTest

Fist launch autotest to get the failures in a Terminal window from the Dogproject folder.

In another Terminal window, to create the test file, type:

Zentest lib/dog.rb > test/test_dog.rb


It will retrieve the dog.rb file in lib folder and create the corresponding test_dog.rb file in test folder, and obviously issue a growl notification and a number of test failures in autotest window.

You should add a:

require 'lib/dog'


just after the require 'test/unit' in the test_dog.rb file, so that it finds you dog class.

Then begin to implement the test, eventually change the corresponding dog file and save. You'll see the results in autotest window (green or red).

Once the test file is created and you have implemented some tests and changes, you may find useful to use the following command to isolate the changes:

ZenTest lib/dog.rb test/test_dog.rb > missing.rb


It will put in the top folder a missing.rb file which tells you if you missed other tests.
